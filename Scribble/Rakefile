require_relative("../../../Rakefile-init")

project="Scribble"
name = "pureweb-sample-HTML5-client-#{project}"	

purewebhome = ENV['PUREWEB_HOME']
pureweblibs = ENV['PUREWEB_LIBS']

variations = ['Client']

desc "Clean #{project}"
task :clean do	
	FileUtils.rm_r("bower_components", :force => true)
end

desc "Setup #{project}"
task :setup do
	sh("bower install")
end

desc "Deploy #{project}"
task :deploy do
	Rake::Task[:stage].invoke
end

desc "Package #{project}"
task :package => [:packageclean, :stage] do
	if !Dir.exists?("#{purewebhome}/../pkg")
		FileUtils.mkdir "#{purewebhome}/../pkg"
	end
	variations.each do|lang|						
		if !Dir.glob("#{purewebhome}/web/clients/#{project}#{lang}/").empty?
	        archive = OS.windows? ? "\"#{CSI_LIB}\\Tools\\7zip\\7z.exe\" a -tzip #{purewebhome}\\..\\pkg\\#{name}.zip #{purewebhome}/web/clients/#{project}#{lang}/*" :
	                             "cd #{purewebhome}/web/clients/#{project}#{lang} && zip -r #{purewebhome}/../pkg/#{name}.zip ./*"
	        sh(archive)
	    end
	end	
end

desc "Package clean #{project}"
task :packageclean do	
	if File.exists?("#{purewebhome}/../pkg/#{name}.zip")
		puts "deleting #{purewebhome}/../pkg/#{name}.zip"
		File.delete "#{purewebhome}/../pkg/#{name}.zip"
	end
end 

desc "Stage #{project}"
task :stage => [:setup] do	
	 variations.each do|lang| 	 	
	 	path = "#{purewebhome}/web/clients/#{project}#{lang}"
    	puts path
    	FileUtils.mkdir_p("#{path}")		
	    #Copy everything but the Rakefile	    
	    files = Dir.glob("*")
	    files.delete("Rakefile") 
	    FileUtils.cp_r(files, "#{path}/")		

	    if File.exist?("#{pureweblibs}/HTML5/pureweb.min.js")
	    	FileUtils.mkdir_p("#{path}/lib/pureweb")		
	    	FileUtils.cp_r("#{pureweblibs}/HTML5/.", "#{path}/lib/pureweb")
			
			# Update index to prevent caching pureweb js between builds
			src = File.read("#{path}/index.html")
			updated = src.gsub(/pureweb.min.js/, "pureweb.min.js?build=" + Time.now().strftime("%m%d%y%H%M%S"))
			updated = updated.gsub(/pureweb.h264.min.js/, "pureweb.h264.min.js?build=" + Time.now().strftime("%m%d%y%H%M%S"))
			
			# To write changes to the file, use:
			File.open("#{path}/index.html", "w") {|file| file.puts updated }
		end			 	
		update_version_in_file("#{path}/js/ScribbleApp.js", "", "-#{PW_VERSION['hash']}", /[5-9].[0-9].[0-9]-DevBuild/)

		# base path replacement to account for PW5/Tomcat differences
        replaceStringInFile("%PUREWEB_BASE_PATH%", ".", "#{path}/index.html")
    end
end

desc "Stage clean #{project}"
task :stageclean do
	variations.each do|lang| 
		FileUtils.rm_r("#{purewebhome}/web/clients/#{project}#{lang}", :force => true)
	end
end

desc "Stage Tomcat #{project}"
task :stageTomcat => [:setup] do	
	 variations.each do|lang| 	
    	path = "#{purewebhome}/tomcat-server/webapp/"
    	FileUtils.mkdir_p("#{path}")		
	    #Copy everything but the Rakefile - index.html is copied to ScribbleApp.html in a separate step
	    files = Dir.glob("*")
	    files.delete("Rakefile")
	    files.delete("index.html") 
	    FileUtils.cp_r(files, "#{path}/")

	    FileUtils.cp_r("index.html", "#{path}/ScribbleApp.html")	

	    if File.exist?("#{pureweblibs}/HTML5/pureweb.min.js")
	    	FileUtils.mkdir_p("#{path}/lib/pureweb")		
	    	FileUtils.cp_r("#{pureweblibs}/HTML5/.", "#{path}/lib/pureweb")
			
			# Update index to prevent caching pureweb js between builds
			src = File.read("#{path}/ScribbleApp.html")
			updated = src.gsub(/pureweb.min.js/, "pureweb.min.js?build=" + Time.now().strftime("%m%d%y%H%M%S"))
			updated = updated.gsub(/pureweb.h264.min.js/, "pureweb.h264.min.js?build=" + Time.now().strftime("%m%d%y%H%M%S"))

			# To write changes to the file, use:
			File.open("#{path}/ScribbleApp.html", "w") {|file| file.puts updated }
		end
		update_version_in_file("#{path}/js/ScribbleApp.js", "", "-#{PW_VERSION['hash']}", /[5-9].[0-9].[0-9]-DevBuild/)

		# base path replacement to account for PW5/Tomcat differences
        replaceStringInFile("%PUREWEB_BASE_PATH%", "", "#{path}/ScribbleApp.html")
    end
end

desc "Stage Tomcat clean #{project}"
task :stageTomcatClean do
	path = "#{purewebhome}/tomcat-server/webapp"
	FileUtils.rm_r("#{path}/ScribbleApp.html", :force => true)
	FileUtils.rm_r("#{path}/css/ScribbleApp.css", :force => true)
	FileUtils.rm_r("#{path}/js/ScribbleApp.js", :force => true)

	# if there are  no more web client apps, then delete the PureWeb HTML5 libs too 
	# otherwise make the conservative assumption that they are still in use

	if Dir.glob("#{path}/*.html").empty?
        FileUtils.rm_r("#{path}/lib/pureweb", :force => true)		
	end
end

desc "Build all the things for #{project}"
task :all do |t|
	scope = t.scope.first || ''
	scope = scope.length > 0 ? scope + ":" : scope
	Rake::Task[scope+'stageclean'].invoke
	Rake::Task[scope+'stage'].invoke
	Rake::Task[scope+'packageclean'].invoke "release"
	Rake::Task[scope+'package'].invoke
end

task :default do
	sh("rake -T")
end
