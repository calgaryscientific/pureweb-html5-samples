PUREWEBHOME = ENV["PUREWEB_HOME"]
PUREWEBLIBS = ENV["PUREWEB_LIBS"]

PROJECT="DDx"

desc "Clean #{PROJECT}"
task :clean do	
	FileUtils.rm_r("bower_components", :force => true)
end

desc "Setup #{PROJECT}"
task :setup do
	sh("bower install")
end

desc "Deploy #{PROJECT}"
task :deploy do
	Rake::Task[:stage].invoke
end

desc "Package #{PROJECT}"
task :package do
	puts "Need to implement PACKAGE for #{PROJECT}"
end

desc "Package clean #{PROJECT}"
task :packageclean do
	puts "Need to implement PACKAGECLEAN for #{PROJECT}"
end 

desc "Stage #{PROJECT}"
task :stage => [:setup] do	
	FileUtils.mkdir_p("#{PUREWEBHOME}/nginx/clients/#{PROJECT}")		
	#Copy everything but the Rakefile
	files = Dir.glob("*")
	files.delete("Rakefile") 
	FileUtils.cp_r(files, "#{PUREWEBHOME}/nginx/clients/#{PROJECT}/")		

	if File.exist?("#{PUREWEBLIBS}/HTML5/pureweb.min.js")
		FileUtils.mkdir_p("#{PUREWEBHOME}/nginx/clients/#{PROJECT}/lib/pureweb")		
		FileUtils.cp_r("#{PUREWEBLIBS}/HTML5/.", "#{PUREWEBHOME}/nginx/clients/#{PROJECT}/lib/pureweb")	
	end
end

desc "Stage clean #{PROJECT}"
task :stageclean do
	FileUtils.rm_r("#{PUREWEBHOME}/nginx/clients/#{PROJECT}", :force => true)
end

desc "Build all the things for #{PROJECT}"
task :all do
	Rake::Task[:stageclean].invoke
	Rake::Task[:stage].invoke
	Rake::Task[:packageclean].invoke
	Rake::Task[:package].invoke
end

task :default do
	sh("rake -T")
end